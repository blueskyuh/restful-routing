@{
    ViewBag.Title = "Extras";
}
<header id="overview">
    <h1>Extras <small>with some special sauce</small></h1>
    <div class="subnav">
        <ul class="nav nav-pills">
            <li><a href="#root">Root</a></li>
            <li><a href="#member">Member and Collection Routes</a></li>
            <li><a href="#standard">Standard Mappings</a></li>
            <li><a href="#standard">View Engines</a></li>
            <li><a href="#format">Format Result</a></li>
            <li><a href="#quirks">Quirks</a></li>
        </ul>
    </div>
</header>
@Html.Flash()

<section id="root">
    <h2>Root</h2>
    <p>Every application needs a default page, and registering a root page has never been easier.</p>
    <pre class="prettyprint linenums">map.Root&lt;Homecontroller&gt;(x => x.Index());</pre>
</section>

<section id="member">
<h2>Member and Collection Routes</h2>
<p>Use the Member and Collection methods inside of resources to add routes to the collection (without an id route parameter) or the member (with an id route parameter). Methods available to map are Get, Post, Put, Delete and Head (Patch coming soon). When within the context of a resource, you will only have access to the Member method.</p>
<pre class="prettyprint linenums">
area.Resources&lt;ResourcesController&gt;(resources => {
    resources.Collection(r => r.Get("many"));
    resources.Member(r => r.Get("lonely"));
});
area.Resource&lt;ExtrasController&gt;(extras => {
    // using member, notice collection is unavailable
    extras.Member(e => e.Get("member"));
});
</pre>
<p>
    <a class="btn" href="@Url.Action("member", "extras")">Member on a Resource</a>
    <a class="btn" href="@Url.Action("lonely", "resources", new { id = 1 })">Member on Resources</a>
    <a class="btn" href="@Url.Action("many", "resources")">Collection on Resources</a>
</p>
</section>

<section id="standard">
<h2>Standard Mappings</h2>
<p>Sometimes our conventions just don't work for you. We may be opinionated, but we do not rule with an iron fist.</p>
<p>Two additional methods are provided so you may add custom routes: Path is a mix of traditional ASP.Net MVC routing syntax with our interface wrapper. Route is a very traditional way of adding a custom route.</p>
<pre class="prettyprint linenums">
area.Resource&lt;ExtrasController&gt;(extras => {
    // Use path
    extras.Path("using_path").To&lt;ExtrasController&gt;(e => e.UsingPath()).GetOnly();
    // Using route
    extras.Route(new Route("mappings/extras/with_route",
        new RouteValueDictionary(new { controller = "extras", action = "usingroute", area="mappings" }),
        new MvcRouteHandler()));
});
</pre>
<p>
    <a class="btn" href="@Url.Action("usingpath", "extras")">Path</a>
    <a class="btn" href="@Url.Action("usingroute", "extras")">Route</a>
</p>
</section>

<section>
<h2>View Engines</h2>
<p>Restful Routing comes with two view engines: RestfulRoutingRazorViewEngine and RestfulRoutingWebFormViewEngine. Let's look at the one of these view engines.</p>
<pre class="prettyprint linenums">
    public class RestfulRoutingRazorViewEngine : RazorViewEngine
    {
        public RestfulRoutingRazorViewEngine()
        {
            AreaMasterLocationFormats = new[] {
                "~/Views/{2}/{1}/{0}.cshtml",
                "~/Views/{2}/{1}/{0}.vbhtml",
                "~/Views/{2}/Shared/{0}.vbhtml",
                "~/Views/{2}/Shared/{0}.cshtml",
            };

            AreaViewLocationFormats = new[] {
                "~/Views/{2}/{1}/{0}.cshtml",
                "~/Views/{2}/{1}/{0}.vbhtml",
                "~/Views/{2}/Shared/{0}.cshtml",
                "~/Views/{2}/Shared/{0}.vbhtml",
            };

            AreaPartialViewLocationFormats = AreaViewLocationFormats;
        }
    }
</pre>
<p>These view engines change the way that ASP.Net MVC will look for views. This is what a default ASP.Net MVC folder structure might look like.</p>
<pre class="linenums previous">
    Views
        |-  Home            // home controller
        |-  Profiles        // profiles controller
    Areas
        |- Administration  // administration area
            |-Controllers  // area controllers
            |-Models       // models for areas
            |-Views
                |-Users        // users views in adminstration area
                |-Products     // products views in administration area
                |-Shared       // area shared views
    etc...
</pre>
<p>And after using a Restful Routing view engine.</p>
<pre class="linenums previous">
    Controllers
        |- Administration   // controllers for administration
    Models
        |-Administration    // models for administration
    Views
        |-  Home            // home controller
        |-  Profiles        // profiles controller
        |-  Administration  // administration area
            |- Users        // users controller in adminstration area
            |- Products     // products controller in administration area
    etc...
</pre>
    <p>Using our view engines is completely optional, but can help reduce the folders necessary to create areas in your code.</p>
</section>
<section id="format">
<h2>Format Result</h2>
<p>This is a feature that allows you to use implicit format extensions on a resource and resources. There are two core methods to this feature: RespondTo, WithFormatRoutes.</p>
<pre class="prettyprint linenums">
namespace RestfulRouting.Documentation.Controllers
{
    public abstract class ApplicationController : Controller {
        protected ActionResult RespondTo(Action&lt;FormatCollection&gt; format) {
            return new FormatResult(format);
        }
    }
}
</pre>
<pre class="prettyprint linenums">
// enable format routes
extras.WithFormatRoutes();
</pre>
<p>We provide a set of known types out of the box to make using our fluent interface a little nicer, but we support any file extension you can think of. To generate these format routes just specify the format as follows.</p>
<pre class="prettyprint linenums">
public ActionResult Awesome() {
    var model = new Awesome {
        date = DateTime.UtcNow.ToShortDateString(),
        id = "awesomwe_id",
        message = "hey you are seeing this in message"
    };
    
    // contrived example
    return RespondTo(format => {
        format.Default = RedirectToAction("show");
        format.Json = () => {
            model.id = "awesome_json";
            return Json(model, JsonRequestBehavior.AllowGet);
        };
        format.Xml = () => {
            model.id = "awesome_xml";
            return Xml(model);
        };
        format["yml"] = () => {
            model.id = "awesome_yml";
            return View("awesome.yml", model);
        };
        format.Html = () => {
            Flash.Success("Nothing to see here");
            return RedirectToAction("show");
        };
    });
}
</pre>
<pre class="prettyprint linenums">
@@Url.Action("usingpath", "extras", new { format = "json" })   // generate json url
@@Url.Action("usingroute", "extras", new { format = "xml" }})  // generate xml url
</pre>
Want to test it out?
<pre id="format-testarea" class="prettyprint">
</pre>

<script type="text/javascript">
    $(function () {
        $('#json').on('click', function (evt) {
            evt.preventDefault();
            var url = $(this).attr('href');
            $.get(url, function (result) {
                $("#format-testarea").html(JSON.stringify(result));
            });
        });

        $('#xml, #yml').on('click', function (evt) {
            evt.preventDefault();
            var url = $(this).attr('href');
            $.ajax({
                url: url,
                type: "GET",
                dataType: "xml",
                complete: function (data) {
                    $("#format-testarea").html(htmlEscape(data.responseText));
                }
            });
        });
    });

    function htmlEscape(str) {
        return String(str)
            .replace(/&/g, '&amp;')
            .replace(/"/g, '&quot;')
            .replace(/'/g, '&#39;')
            .replace(/</g, '&lt;')
            .replace(/>/g, '&gt;');
    }
</script>

<p id="format-buttons">
    <a id="json" class="btn" href="@Url.Action("awesome", "extras", new { format = "json" })">Json</a>
    <a id="xml" class="btn" href="@Url.Action("awesome", "extras", new { format = "xml" })">Xml</a>
        <a id="xml" class="btn" href="@Url.Action("awesome", "extras", new { format = "yml" })">Yaml</a>
</p>

<p>Awesome right?! We promise, there is no monkey business happening here. This is the real deal. Although we recommend you read the following section of Quirks if you plan on using format routes.</p>

<p>This is helpful if you are building single page applications Use sparingly and understand when it is appropriate to seperate functionality in your actions.</p>
</section> 
<section id="quirks">
<h2>Quirks</h2>
<p>ASP.Net MVC always tries to be helpful. Helpful, although well intentioned, can lead to some strange behavior sometimes. The biggest problem can be saved route values from your existing request.</p>

<pre class="prettyprint linenums">
/mappings/resources/1       // My request to a resource. { id: 1, area: mappings, controller: resources }
    
@@Url.Action("index", new { controller = "resources", area = "mappings", id = 1 }  // this is equivalent
@@Url.Action("index")                                                              // to this route, MVC carries over old values
</pre>

<p>Understanding this quirk can help you debug lots of issues, not just with Restful Routing, but with ASP.NET MVC in general.</p>
</section>